[user]
  name = Stephen Best
  email = bestie@gmail.com
[alias]
  # The standards
  st = status
  co = checkout
  cob = checkout -b
  cp = cherry-pick
  br = branch

  # Relatviely basic aliases I like
  unstage = rm --cached
  staged = diff --cached
  recent-branches = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format='%(refname:short)'
  diff-commits = log --oneline --graph HEAD..
  merged-branches = !git branch --merged ${1-master}
  up = !git pull --rebase $@ && git submodule update --init --recursive
  wip = !git add -A && git commit -m "WIP"
  omnom = commit --amend -C HEAD

  ### Some more complicated stuff

  # Show a nice graph of the history up to <revision>. Defaults to current HEAD,
  # Pipes into less if the graph is longer than a single page.
  lg = "!f() { git private-log-pretty-graph $@ | less --raw-control-chars --quit-if-one-screen ; }; f"

  # Do the same but stop at the first common anceator with main / specified revision
  lg-merge-base = "!f() { git private-log-pretty-graph $(git merge-base HEAD ${1-main})^..HEAD | less --raw-control-chars --quit-if-one-screen ; }; f"

  # Find a commit using fzf displayed in graph form.  # Must be an ancestor of HEAD.
  find-commit = "!f() { git private-log-plain-graph | fzf | awk '{print $1}'; }; f"
  find-commit-and = "!f() { git find-commit | xargs -o ${@-echo} ; }; f"

  # Add untracked files via fzf file menu <tab> / <shift-tab> for multi select
  au = "!f() { git ls-files --others --exclude-standard | fzf --multi | xargs git add ; }; f"

  # Resets the committer date of rewitten/rebased commits to the original time.
  # Goes back to the specified revision.
  date-reset= "!f() { git filter-branch --env-filter 'GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE; export GIT_COMMITTER_DATE' {$1}..HEAD; }; f"

  # Remove all trace of file / pattern
  nuke = "!f() { git filter-branch --force --index-filter \"git rm --cached -r --ignore-unmatch $1\" --prune-empty --tag-name-filter cat -- --all; }; f"

  # You want to fast-forward merge you commits but origin/main has changed. AGAIN.
  fucksake = !git up && git rebase origin/main && git push -f

  # "private" functions
  private-log-plain-graph = log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit
  private-log-pretty-graph = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

[core]
  attributesfile = ~/.gitattributes
  excludesfile = ~/.gitignore
  editor = vim
  pager = diff-so-fancy | less --tabs=4 -RFX
[push]
  default = current
[commit]
	verbose = true
[init]
	defaultBranch = main
